# 1 con game caro chạy vô cực trên bảng consol, 
# mấy anh chị tham khảo đóng góp ý kiến giúp với ạ!!

#include <iostream>

using namespace std;

struct toaDo {

 int x, y;

 toaDo(){

 x = 0; y = 0;

 }

 toaDo(int x, int y){

 this->x = x;

 this->y = y;

 }

 bool operator==(const toaDo& other) const {

        return x == other.x && y == other.y;

 }

 friend ostream & operator << (ostream &o, toaDo x);

 friend istream & operator >> (istream &i, toaDo &x);

};

ostream & operator << (ostream &o, toaDo X){

 o << X.x << " " << X.y << endl;

 return o;

}

istream & operator >> (istream &i, toaDo &X){

 cout << "x: "; i >> X.x;

 cout << "y: "; i >> X.y;

 return i;

}

struct node {

 toaDo toaDo;

 struct node *next;

};

typedef struct node node;

void duyetNode (node *head){

 cout << "DSLK: " << endl;

 while (head != NULL){

 cout << head->toaDo <<" ";

 head = head->next;

 }

 cout << endl;

 return;

}

node* makeNode (toaDo x){

 node *newNode = (node*)malloc(sizeof(node));

 newNode->toaDo = x;

 newNode->next = NULL;

 return newNode;

}

void pushFront (node **head, toaDo x){ 

 node *newNode = makeNode(x); 

 newNode->next = *head; 

 *head = newNode; 

}

void popBack (node **head){

 if (*head == NULL)

 return;

 node *temp = *head;

 if (temp->next == NULL){

 *head = NULL;

 free(temp);

 return;

 }

 while (temp->next->next != NULL){

 temp = temp->next;

 }

 node *last = temp->next;

 temp->next = NULL;

 free(last);

}

int size (node *head){

 int count = 0;

 while (head != NULL){

 count++;

 head = head->next;

 }

 return count;

}

void popFront (node **head){

 if (*head == NULL)

 return;

 node *temp = *head;

 *head = (*head)->next;

 free(temp);

}

bool check (node *A, toaDo x){

 while(A != NULL){

 if (x == A->toaDo){

 return false; 

 }

 A = A->next;

 }

 return true; 

}

int check1 (int a[3][3]){

 if (a[0][0] == a[1][1] && a[1][1] == a[2][2])

 return a

 return 0;

}

int check2 (int a[3][3]){

 if (a[0][2] == a[1][1] && a[1][1] == a[2][0])

 return a

 return 0;

}

int check3 (int a[3][3]){

 if (a[0][0] != a[0][1] || a[0][0] != a[0][2]) return 0;

 else return a[0][0]; 

}

int check4 (int a[3][3]){

 if (a[1][0] != a[1][1] || a[1][0] != a[1][2]) return 0;

 else return a[1][0];

}

int check5 (int a[3][3]){

 if (a[2][0] != a[2][1] || a[2][0] != a[2][2]) return 0;

 else return a[2][0];

}

int check6 (int a[3][3]){

 if (a[0][0] != a[1][0] || a[0][0] != a[2][0]) return 0;

 else return a[0][0];

}

int check7 (int a[3][3]){

 if (a[0][1] != a[1][1] || a[1][1] != a[2][1]) return 0;

 else return a[0][1];

}

int check8 (int a[3][3]){

 if (a[0][2] != a[1][2] || a[0][2] != a[2][2]) return 0;

 else return a[0][2];

}

int check0 (int a[3][3]){

 int check = check1(a);

 if (check) return check;

 check = check2(a);

 if (check) return check;

 check = check3(a);

 if (check) return check;

 check = check4(a);

 if (check) return check;

 check = check5(a);

 if (check) return check;

 check = check6(a);

 if (check) return check;

 check = check7(a);

 if (check) return check;

 check = check8(a);

 if (check) return check;

 return 0;

}

void print(int a[3][3]){

 cout << endl <<  "X                          " << endl << endl;

 cout << "|" << endl << "v" << endl << "   ___________________"<< endl << "   |     |     |     |" <<  endl << "0  |  "; 

 for (int i=0; i<3; i++){

  

 for (int j=0; j<3; j++){

 if (a[i][j] == 0) cout << " ";

 if (a[i][j] == 1) cout << "X";

 if (a[i][j] == 2) cout << "O"; 

 cout << "  |  ";

 }

 cout << endl <<  "   |_____|_____|_____|"  ;

 if (i<2) cout << endl << "   |     |     |     |"  << endl << i+1 << "  |  ";

 }

 cout << endl << endl <<  "      0     1     2      <--  Y "<< endl << endl;

}

int main(){

 node *A = NULL;

 toaDo a;

 int caro[3][3] = {0}; 

 print(caro); 

 cout << "Nguoi choi 1: " << endl; cin >> a; 

 pushFront(&A, a);

 caro[A->toaDo.x][A->toaDo.y] = 1;

 print(caro);

 while (1){

 cout << "Nguoi choi 2: " << endl; cin >> a; 

 if (check(A, a)){ 

 pushFront(&A, a);

 caro[A->toaDo.x][A->toaDo.y] = 2;

 print(caro);

 break;

 }

 }

 while (1){

 cout << "Nguoi choi 1: " << endl; cin >> a; 

 if (check(A, a)){ 

 pushFront(&A, a);

 caro[A->toaDo.x][A->toaDo.y] = 1;

 print(caro);

 break;

 }

 }

 while (1){

 cout << "Nguoi choi 2: " << endl; cin >> a; 

 if (check(A, a)){ 

 pushFront(&A, a);

 caro[A->toaDo.x][A->toaDo.y] = 2;

 print(caro);

 break;

 }

 }

 while (1){

 cout << "Nguoi choi 1: " << endl; cin >> a;

 if (check(A, a)){ 

 pushFront(&A, a);

 caro[A->toaDo.x][A->toaDo.y] = 1;

 print(caro);

 break;

 }

 }

 if (check0(caro)) {

 cout <<" Winner: " << check0(caro);

 return 0;

 }

 while (1){

 cout << "Nguoi choi 2: " << endl; cin >> a; 

 if (check(A, a)){ 

 pushFront(&A, a);

 caro[A->toaDo.x][A->toaDo.y] = 2;

 print(caro);

 break;

 }

 }

 if (check0(caro)) {

 cout <<" Winner: " << check0(caro);

 return 0;

 }

 while (1) {

          while (1){

 cout << "Nguoi choi 1: " << endl; cin >> a;

 if (check(A, a)){ 

 node *tempp = A;

 while (tempp->next != NULL){

 tempp = tempp->next;

 }

 caro[tempp->toaDo.x][tempp->toaDo.y] = 0;

 popBack(&A);

 pushFront(&A, a);

 caro[A->toaDo.x][A->toaDo.y] = 1;

 print(caro);

 break; 

 }

 }

 if (check0(caro)) {

 cout <<" Winner: " << check0(caro);

 break;

 }

 while (1){

 cout << "Nguoi choi 2: " << endl; cin >> a;

 if (check(A, a)){ 

 node *tempp = A;

 while (tempp->next != NULL){

 tempp = tempp->next;

 }

 caro[tempp->toaDo.x][tempp->toaDo.y] = 0;

 popBack(&A);

 pushFront(&A, a);

 caro[A->toaDo.x][A->toaDo.y] = 2;

 print(caro);

 break; 

 }

 }

 if (check0(caro)) {

 cout <<" Winner: " << check0(caro);

 break;

 }

 }

 free (A);

 return 0;

}
